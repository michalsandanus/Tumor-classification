/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import com.pixelmed.dicom.DicomException;
import controllers.Application;
import controllers.Coregistration;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ItemEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Iterator;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import models.CoregistratedData;
import models.Patient;
import org.xml.sax.SAXException;

/**
 *
 * @author Michal Sandanus
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    private static Application app;
    private CoregistratedData actualPatient = null;
    private int actualFrame = 0;
    
    private final Color tagsColor = new Color(0,102,102);
    private final Color tagsMouseEnteredColor = new Color(69,162,158);
    private final Color tagsSelectedColor = new Color(0,204,204);
    
    
    public MainForm() {
        getApplicationData();
        initComponents();
        loadApplicationData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        penelMenu = new javax.swing.JPanel();
        panelLogo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panelHomeTag = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        panelPatientTag = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        panelDisplayTag = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        panelContent = new javax.swing.JPanel();
        panelHome = new javax.swing.JPanel();
        txtWorkingDirectory = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnBrowseWorkingDirectory = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        panelPatient = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtMRIDirectory = new javax.swing.JTextField();
        txtSpectroscopyExcel = new javax.swing.JTextField();
        btnBrowseMRIDirectory = new javax.swing.JButton();
        btnBrowseSpectroscopy = new javax.swing.JButton();
        btnCoregistrate = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtSerachPatientName = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCoregistratedData = new javax.swing.JTable();
        btnLoadPatient = new javax.swing.JButton();
        txtSpectroscopyDICOM = new javax.swing.JTextField();
        btnBrowseSpectroscopyDICOM = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtSegmentationMask = new javax.swing.JTextField();
        btnBrowseSegmentationMask = new javax.swing.JButton();
        panelDisplay = new javax.swing.JPanel();
        lblImage = new javax.swing.JLabel();
        sliderImage = new javax.swing.JSlider();
        jPanel1 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        lblPatientBirthDate = new javax.swing.JLabel();
        lblPatientId = new javax.swing.JLabel();
        lblPatientName = new javax.swing.JLabel();
        lblPatientSex = new javax.swing.JLabel();
        lblPatientAge = new javax.swing.JLabel();
        lblPatientWeight = new javax.swing.JLabel();
        lblClassificationDoctor = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblDoctorNote = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        lblClassificationAI = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        lblActualFrame = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        cmboxMetabolites = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        txtDoctorNote = new javax.swing.JTextField();
        txtDiagnosis = new javax.swing.JTextField();
        btnAddDiagnosis = new javax.swing.JButton();
        btnAddDoctorNote = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        btnClassify = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MRI-Spectro Viewer");
        setBounds(new java.awt.Rectangle(0, 0, 1120, 630));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 1120, 630));
        setMinimumSize(new java.awt.Dimension(1120, 630));
        setModalExclusionType(null);
        setSize(new java.awt.Dimension(1120, 630));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        penelMenu.setBackground(new java.awt.Color(11, 12, 16));
        penelMenu.setPreferredSize(new java.awt.Dimension(1120, 35));

        panelLogo.setPreferredSize(new java.awt.Dimension(68, 37));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MRI-Spectro Viewer");

        javax.swing.GroupLayout panelLogoLayout = new javax.swing.GroupLayout(panelLogo);
        panelLogo.setLayout(panelLogoLayout);
        panelLogoLayout.setHorizontalGroup(
            panelLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
        );
        panelLogoLayout.setVerticalGroup(
            panelLogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
        );

        panelHomeTag.setBackground(new java.awt.Color(0, 102, 102));
        panelHomeTag.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                panelHomeTagMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                panelHomeTagMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panelHomeTagMouseReleased(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(11, 12, 16));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(11, 12, 16));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Domov");

        javax.swing.GroupLayout panelHomeTagLayout = new javax.swing.GroupLayout(panelHomeTag);
        panelHomeTag.setLayout(panelHomeTagLayout);
        panelHomeTagLayout.setHorizontalGroup(
            panelHomeTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
        );
        panelHomeTagLayout.setVerticalGroup(
            panelHomeTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
        );

        panelPatientTag.setBackground(new java.awt.Color(0, 102, 102));
        panelPatientTag.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                panelPatientTagMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                panelPatientTagMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panelPatientTagMouseReleased(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(11, 12, 16));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(11, 12, 16));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Pacient");

        javax.swing.GroupLayout panelPatientTagLayout = new javax.swing.GroupLayout(panelPatientTag);
        panelPatientTag.setLayout(panelPatientTagLayout);
        panelPatientTagLayout.setHorizontalGroup(
            panelPatientTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
        );
        panelPatientTagLayout.setVerticalGroup(
            panelPatientTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
        );

        panelDisplayTag.setBackground(new java.awt.Color(0, 102, 102));
        panelDisplayTag.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                panelDisplayTagMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                panelDisplayTagMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panelDisplayTagMouseReleased(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(11, 12, 16));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(11, 12, 16));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Zobrazenie");

        javax.swing.GroupLayout panelDisplayTagLayout = new javax.swing.GroupLayout(panelDisplayTag);
        panelDisplayTag.setLayout(panelDisplayTagLayout);
        panelDisplayTagLayout.setHorizontalGroup(
            panelDisplayTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
        );
        panelDisplayTagLayout.setVerticalGroup(
            panelDisplayTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout penelMenuLayout = new javax.swing.GroupLayout(penelMenu);
        penelMenu.setLayout(penelMenuLayout);
        penelMenuLayout.setHorizontalGroup(
            penelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(penelMenuLayout.createSequentialGroup()
                .addComponent(panelLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
                .addComponent(panelHomeTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelPatientTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelDisplayTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        penelMenuLayout.setVerticalGroup(
            penelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(penelMenuLayout.createSequentialGroup()
                .addGroup(penelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelPatientTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelHomeTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelDisplayTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(penelMenu, java.awt.BorderLayout.PAGE_START);

        panelContent.setBackground(new java.awt.Color(31, 40, 51));
        panelContent.setLayout(new java.awt.CardLayout());

        panelHome.setBackground(new java.awt.Color(20, 25, 31));

        txtWorkingDirectory.setEditable(false);
        txtWorkingDirectory.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Pracovný priečinok:");

        btnBrowseWorkingDirectory.setText("Vyhľadať");
        btnBrowseWorkingDirectory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnBrowseWorkingDirectoryMouseReleased(evt);
            }
        });

        jLabel33.setBackground(new java.awt.Color(255, 255, 255));
        jLabel33.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(255, 255, 255));
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setText("MRI-Spectro viewer");

        jLabel34.setBackground(new java.awt.Color(255, 255, 255));
        jLabel34.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(255, 255, 255));
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel34.setText("Nástroj na koregistráciu a zobrazovanie dát magnetickej rezonancie a spektroskopie mozgu");

        javax.swing.GroupLayout panelHomeLayout = new javax.swing.GroupLayout(panelHome);
        panelHome.setLayout(panelHomeLayout);
        panelHomeLayout.setHorizontalGroup(
            panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHomeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(txtWorkingDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(btnBrowseWorkingDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(111, 111, 111))
            .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, 1149, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelHomeLayout.setVerticalGroup(
            panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHomeLayout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(jLabel33)
                .addGap(27, 27, 27)
                .addComponent(jLabel34)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 236, Short.MAX_VALUE)
                .addGroup(panelHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtWorkingDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(btnBrowseWorkingDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(136, 136, 136))
        );

        panelContent.add(panelHome, "card5");

        panelPatient.setBackground(new java.awt.Color(20, 25, 31));

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Pridať nového pacienta");

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Pirečinok MRI:");

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Spektroskopia (xls):");

        txtMRIDirectory.setEditable(false);
        txtMRIDirectory.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        txtSpectroscopyExcel.setEditable(false);
        txtSpectroscopyExcel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        btnBrowseMRIDirectory.setText("Vyhľadať");
        btnBrowseMRIDirectory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnBrowseMRIDirectoryMouseReleased(evt);
            }
        });

        btnBrowseSpectroscopy.setText("Vyhľadať");
        btnBrowseSpectroscopy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnBrowseSpectroscopyMouseReleased(evt);
            }
        });

        btnCoregistrate.setText("Spracovať");
        btnCoregistrate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnCoregistrateMouseReleased(evt);
            }
        });

        jLabel15.setBackground(new java.awt.Color(255, 255, 255));
        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Načítať pacienta");

        jLabel16.setBackground(new java.awt.Color(255, 255, 255));
        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Meno pacienta: ");

        txtSerachPatientName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtSerachPatientName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSerachPatientNameKeyReleased(evt);
            }
        });

        tableCoregistratedData.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tableCoregistratedData.getTableHeader().setFont(new java.awt.Font("Segoe UI", 1, 14));
        tableCoregistratedData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Meno pacienta", "Id pacienta", "Dátum narodenia"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCoregistratedData.getTableHeader().setResizingAllowed(false);
        tableCoregistratedData.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableCoregistratedData);
        if (tableCoregistratedData.getColumnModel().getColumnCount() > 0) {
            tableCoregistratedData.getColumnModel().getColumn(0).setResizable(false);
            tableCoregistratedData.getColumnModel().getColumn(1).setResizable(false);
            tableCoregistratedData.getColumnModel().getColumn(2).setResizable(false);
        }

        btnLoadPatient.setText("Načítať pacienta");
        btnLoadPatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnLoadPatientMouseReleased(evt);
            }
        });

        txtSpectroscopyDICOM.setEditable(false);
        txtSpectroscopyDICOM.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        btnBrowseSpectroscopyDICOM.setText("Vyhľadať");
        btnBrowseSpectroscopyDICOM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnBrowseSpectroscopyDICOMMouseReleased(evt);
            }
        });

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Spektroskopia (raw):");

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Segmentačná maska:");

        txtSegmentationMask.setEditable(false);
        txtSegmentationMask.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        btnBrowseSegmentationMask.setText("Vyhľadať");
        btnBrowseSegmentationMask.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnBrowseSegmentationMaskMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout panelPatientLayout = new javax.swing.GroupLayout(panelPatient);
        panelPatient.setLayout(panelPatientLayout);
        panelPatientLayout.setHorizontalGroup(
            panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPatientLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPatientLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelPatientLayout.createSequentialGroup()
                        .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelPatientLayout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12))
                                .addGap(18, 18, 18)
                                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPatientLayout.createSequentialGroup()
                                        .addComponent(txtSegmentationMask)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnBrowseSegmentationMask, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPatientLayout.createSequentialGroup()
                                        .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtSpectroscopyExcel)
                                            .addComponent(txtMRIDirectory)
                                            .addComponent(txtSpectroscopyDICOM, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(18, 18, 18)
                                        .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnBrowseMRIDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnBrowseSpectroscopy, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnBrowseSpectroscopyDICOM, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPatientLayout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(btnCoregistrate, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel15)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPatientLayout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(panelPatientLayout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtSerachPatientName))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 871, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(btnLoadPatient)))
                        .addGap(37, 37, 37))))
        );
        panelPatientLayout.setVerticalGroup(
            panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPatientLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel7)
                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtMRIDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseMRIDirectory))
                .addGap(18, 18, 18)
                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtSpectroscopyExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseSpectroscopy))
                .addGap(18, 18, 18)
                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(btnBrowseSpectroscopyDICOM)
                    .addComponent(txtSpectroscopyDICOM, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtSegmentationMask, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseSegmentationMask))
                .addGap(18, 18, 18)
                .addComponent(btnCoregistrate)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtSerachPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPatientLayout.createSequentialGroup()
                        .addGap(0, 124, Short.MAX_VALUE)
                        .addComponent(btnLoadPatient))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(35, 35, 35))
        );

        panelContent.add(panelPatient, "card4");

        panelDisplay.setBackground(new java.awt.Color(20, 25, 31));

        lblImage.setBackground(new java.awt.Color(255, 255, 255));
        lblImage.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblImage.setForeground(new java.awt.Color(255, 255, 255));
        lblImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImage.setText("Neboli načítané žiadne dáta");
        lblImage.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblImage.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                lblImageMouseWheelMoved(evt);
            }
        });

        sliderImage.setBackground(new java.awt.Color(20, 25, 31));
        sliderImage.setForeground(new java.awt.Color(0, 102, 102));
        sliderImage.setMaximum(49);
        sliderImage.setOrientation(javax.swing.JSlider.VERTICAL);
        sliderImage.setToolTipText("");
        sliderImage.setValue(24);
        sliderImage.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderImageStateChanged(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(20, 25, 31));
        jPanel1.setForeground(new java.awt.Color(0, 102, 102));

        jLabel17.setBackground(new java.awt.Color(255, 255, 255));
        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Informácie o pacientovi");

        jLabel18.setBackground(new java.awt.Color(255, 255, 255));
        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Meno:");

        jLabel19.setBackground(new java.awt.Color(255, 255, 255));
        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("ID:");

        jLabel20.setBackground(new java.awt.Color(255, 255, 255));
        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Dátum narodenia:");

        jLabel21.setBackground(new java.awt.Color(255, 255, 255));
        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Pohlavie:");

        jLabel22.setBackground(new java.awt.Color(255, 255, 255));
        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Vek:");

        jLabel23.setBackground(new java.awt.Color(255, 255, 255));
        jLabel23.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Váha:");

        jLabel24.setBackground(new java.awt.Color(255, 255, 255));
        jLabel24.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("Diagnostické údaje");

        jLabel30.setBackground(new java.awt.Color(255, 255, 255));
        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setText("Diagnóza (AI):");

        lblPatientBirthDate.setBackground(new java.awt.Color(255, 255, 255));
        lblPatientBirthDate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPatientBirthDate.setForeground(new java.awt.Color(255, 255, 255));
        lblPatientBirthDate.setText("Neurčené");

        lblPatientId.setBackground(new java.awt.Color(255, 255, 255));
        lblPatientId.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPatientId.setForeground(new java.awt.Color(255, 255, 255));
        lblPatientId.setText("Neurčené");

        lblPatientName.setBackground(new java.awt.Color(255, 255, 255));
        lblPatientName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPatientName.setForeground(new java.awt.Color(255, 255, 255));
        lblPatientName.setText("Neurčené");

        lblPatientSex.setBackground(new java.awt.Color(255, 255, 255));
        lblPatientSex.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPatientSex.setForeground(new java.awt.Color(255, 255, 255));
        lblPatientSex.setText("Neurčené");

        lblPatientAge.setBackground(new java.awt.Color(255, 255, 255));
        lblPatientAge.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPatientAge.setForeground(new java.awt.Color(255, 255, 255));
        lblPatientAge.setText("Neurčené");

        lblPatientWeight.setBackground(new java.awt.Color(255, 255, 255));
        lblPatientWeight.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPatientWeight.setForeground(new java.awt.Color(255, 255, 255));
        lblPatientWeight.setText("Neurčené");

        lblClassificationDoctor.setBackground(new java.awt.Color(255, 255, 255));
        lblClassificationDoctor.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblClassificationDoctor.setForeground(new java.awt.Color(255, 255, 255));
        lblClassificationDoctor.setText("Neurčené");

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Poznámka: ");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        lblDoctorNote.setBackground(new java.awt.Color(255, 255, 255));
        lblDoctorNote.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblDoctorNote.setForeground(new java.awt.Color(255, 255, 255));
        lblDoctorNote.setText("Bez poznámky");
        lblDoctorNote.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel35.setBackground(new java.awt.Color(255, 255, 255));
        jLabel35.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(255, 255, 255));
        jLabel35.setText("Diagnóza (lekár):");

        lblClassificationAI.setBackground(new java.awt.Color(255, 255, 255));
        lblClassificationAI.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblClassificationAI.setForeground(new java.awt.Color(255, 255, 255));
        lblClassificationAI.setText("Neurčené");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(63, 63, 63)
                        .addComponent(lblDoctorNote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel19)
                            .addComponent(jLabel18)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPatientWeight)
                            .addComponent(lblPatientAge)
                            .addComponent(lblPatientSex)
                            .addComponent(lblPatientName)
                            .addComponent(lblPatientBirthDate, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 44, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(lblClassificationAI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblClassificationDoctor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel17)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(lblPatientName))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(lblPatientId))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(lblPatientBirthDate))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(lblPatientSex))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(lblPatientAge))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(lblPatientWeight))
                .addGap(32, 32, 32)
                .addComponent(jLabel24)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(lblClassificationAI))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(lblClassificationDoctor))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblDoctorNote, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel31.setBackground(new java.awt.Color(255, 255, 255));
        jLabel31.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(255, 255, 255));
        jLabel31.setText("Aktuálna snímka: ");

        lblActualFrame.setBackground(new java.awt.Color(255, 255, 255));
        lblActualFrame.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblActualFrame.setForeground(new java.awt.Color(255, 255, 255));
        lblActualFrame.setText("0");

        jLabel32.setBackground(new java.awt.Color(255, 255, 255));
        jLabel32.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(255, 255, 255));
        jLabel32.setText("Zvoľte metabolit: ");

        cmboxMetabolites.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmboxMetabolitesItemStateChanged(evt);
            }
        });

        jLabel25.setBackground(new java.awt.Color(255, 255, 255));
        jLabel25.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("Diagnóza: ");

        jLabel26.setBackground(new java.awt.Color(255, 255, 255));
        jLabel26.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setText("Poznámka:");

        txtDoctorNote.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        txtDiagnosis.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        btnAddDiagnosis.setText("Pridať diagnózu");
        btnAddDiagnosis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnAddDiagnosisMouseReleased(evt);
            }
        });

        btnAddDoctorNote.setText("Pridať poznámku");
        btnAddDoctorNote.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnAddDoctorNoteMouseReleased(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel27.setBackground(new java.awt.Color(255, 255, 255));
        jLabel27.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("Pridať dignostické údaje");

        jLabel28.setBackground(new java.awt.Color(255, 255, 255));
        jLabel28.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("Zobrazovacie údaje");

        btnClassify.setText("Klasifikovať automatickým klasifikátorom");
        btnClassify.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnClassifyMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout panelDisplayLayout = new javax.swing.GroupLayout(panelDisplay);
        panelDisplay.setLayout(panelDisplayLayout);
        panelDisplayLayout.setHorizontalGroup(
            panelDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDisplayLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDisplayLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnClassify, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelDisplayLayout.createSequentialGroup()
                            .addGap(89, 89, 89)
                            .addComponent(btnAddDiagnosis))
                        .addGroup(panelDisplayLayout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addGroup(panelDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel32)
                                .addGroup(panelDisplayLayout.createSequentialGroup()
                                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lblActualFrame))
                                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(panelDisplayLayout.createSequentialGroup()
                                    .addComponent(jLabel25)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtDiagnosis, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelDisplayLayout.createSequentialGroup()
                                    .addComponent(jLabel26)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtDoctorNote, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelDisplayLayout.createSequentialGroup()
                                    .addGap(71, 71, 71)
                                    .addComponent(btnAddDoctorNote)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDisplayLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmboxMetabolites, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sliderImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );
        panelDisplayLayout.setVerticalGroup(
            panelDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelDisplayLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator3)
                .addContainerGap())
            .addGroup(panelDisplayLayout.createSequentialGroup()
                .addGroup(panelDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDisplayLayout.createSequentialGroup()
                        .addContainerGap(80, Short.MAX_VALUE)
                        .addGroup(panelDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sliderImage, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelDisplayLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel28)
                        .addGap(18, 18, 18)
                        .addGroup(panelDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel31)
                            .addComponent(lblActualFrame))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel32)
                        .addGap(18, 18, 18)
                        .addComponent(cmboxMetabolites, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panelDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(txtDiagnosis, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnAddDiagnosis)
                        .addGap(22, 22, 22)
                        .addGroup(panelDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26)
                            .addComponent(txtDoctorNote, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnAddDoctorNote)
                        .addGap(40, 40, 40)
                        .addComponent(btnClassify)))
                .addGap(34, 34, 34))
            .addComponent(jSeparator2)
        );

        panelContent.add(panelDisplay, "card3");

        getContentPane().add(panelContent, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseWorkingDirectoryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBrowseWorkingDirectoryMouseReleased
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("ZVOĽTE PRACOVNÝ PRIEČINOK");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            this.app = Application.getInstance(); 
            app.setWorkingDir(chooser.getSelectedFile());
            loadApplicationData();
            txtWorkingDirectory.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnBrowseWorkingDirectoryMouseReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        serializeWorkingDirPath(app.getWorkingDir());
    }//GEN-LAST:event_formWindowClosing

    private void panelHomeTagMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelHomeTagMouseReleased
        panelPatient.setVisible(false);
        panelDisplay.setVisible(false);
        panelHomeTag.setBackground(tagsSelectedColor);
        panelDisplayTag.setBackground(tagsColor);
        panelPatientTag.setBackground(tagsColor);
        
        panelHome.setVisible(true);
    }//GEN-LAST:event_panelHomeTagMouseReleased

    private void panelPatientTagMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelPatientTagMouseReleased
        panelHome.setVisible(false);
        panelDisplay.setVisible(false);
        panelHomeTag.setBackground(tagsColor);
        panelDisplayTag.setBackground(tagsColor);
        panelPatientTag.setBackground(tagsSelectedColor);
        
        panelPatient.setVisible(true);
    }//GEN-LAST:event_panelPatientTagMouseReleased

    private void panelDisplayTagMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDisplayTagMouseReleased
        panelHome.setVisible(false);
        panelPatient.setVisible(false);
        panelHomeTag.setBackground(tagsColor);
        panelDisplayTag.setBackground(tagsSelectedColor);
        panelPatientTag.setBackground(tagsColor);
        
        panelDisplay.setVisible(true);
    }//GEN-LAST:event_panelDisplayTagMouseReleased

    private void panelHomeTagMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelHomeTagMouseEntered
        if (!panelHome.isVisible()) panelHomeTag.setBackground(tagsMouseEnteredColor);
    }//GEN-LAST:event_panelHomeTagMouseEntered

    private void panelHomeTagMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelHomeTagMouseExited
        if (!panelHome.isVisible()) panelHomeTag.setBackground(tagsColor);
    }//GEN-LAST:event_panelHomeTagMouseExited

    private void panelPatientTagMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelPatientTagMouseEntered
        if (!panelPatient.isVisible()) panelPatientTag.setBackground(tagsMouseEnteredColor);
    }//GEN-LAST:event_panelPatientTagMouseEntered

    private void panelPatientTagMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelPatientTagMouseExited
        if (!panelPatient.isVisible()) panelPatientTag.setBackground(tagsColor);
    }//GEN-LAST:event_panelPatientTagMouseExited

    private void panelDisplayTagMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDisplayTagMouseEntered
        if (!panelDisplay.isVisible()) panelDisplayTag.setBackground(tagsMouseEnteredColor);
    }//GEN-LAST:event_panelDisplayTagMouseEntered

    private void panelDisplayTagMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDisplayTagMouseExited
        if (!panelDisplay.isVisible())  panelDisplayTag.setBackground(tagsColor);
    }//GEN-LAST:event_panelDisplayTagMouseExited

    private void btnAddDoctorNoteMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddDoctorNoteMouseReleased
        try {
            if (actualPatient == null) throw new IOException("Prosím zvoľte pacienta");
            if (txtDoctorNote.getText().equals("") || txtDoctorNote.getText() == null) throw new IOException("Prosím vyplnte poznámku pacienta");

            actualPatient.setDoctorNote(txtDoctorNote.getText());
            actualPatient.setData();
            lblDoctorNote.setText(txtDoctorNote.getText());
            txtDoctorNote.setText("");

        }
        catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Chyba", JOptionPane.ERROR_MESSAGE);
        }
        catch (ParserConfigurationException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (TransformerException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddDoctorNoteMouseReleased

    private void btnAddDiagnosisMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddDiagnosisMouseReleased
        try {
            if (actualPatient == null) throw new IOException("Prosím zvoľte pacienta");
            if (txtDiagnosis.getText().equals("") || txtDiagnosis.getText() == null) throw new IOException("Prosím vyplnte diagnózu pacienta");

            actualPatient.setDoctorClass(txtDiagnosis.getText());
            actualPatient.setData();
            lblClassificationDoctor.setText(txtDiagnosis.getText());
            txtDiagnosis.setText("");

        }
        catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Chyba", JOptionPane.ERROR_MESSAGE);
        }
        catch (ParserConfigurationException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (TransformerException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddDiagnosisMouseReleased

    private void cmboxMetabolitesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmboxMetabolitesItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            try {
                actualPatient.loadSpectroscopicImages(cmboxMetabolites.getSelectedIndex());
                displayFrame(actualFrame);
            } catch (IOException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_cmboxMetabolitesItemStateChanged

    private void sliderImageStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderImageStateChanged
        actualFrame = sliderImage.getValue();
        displayFrame(actualFrame);
    }//GEN-LAST:event_sliderImageStateChanged

    private void lblImageMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_lblImageMouseWheelMoved
        if (evt.getWheelRotation() > 0) {
            if (actualFrame > 0) {
                actualFrame--;
                displayFrame(actualFrame);
                sliderImage.setValue(sliderImage.getValue() - 1);
            }
        }
        else {
            if (actualFrame + 1 < actualPatient.getMriImages().size()) {
                actualFrame++;
                displayFrame(actualFrame);
                sliderImage.setValue(sliderImage.getValue() + 1);
            }
        }
    }//GEN-LAST:event_lblImageMouseWheelMoved

    private void btnBrowseSpectroscopyDICOMMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBrowseSpectroscopyDICOMMouseReleased
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Zvoľte raw súbor so spektroskopickými dátami");

        FileFilter filter = new FileNameExtensionFilter("RAW Files", "raw");
        chooser.setFileFilter(filter);

        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            txtSpectroscopyDICOM.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnBrowseSpectroscopyDICOMMouseReleased

    private void btnLoadPatientMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLoadPatientMouseReleased
        try {
            if (tableCoregistratedData.getSelectedRow() < 0) throw new ArrayIndexOutOfBoundsException();
            lblImage.setText("");
            actualPatient = app.getCoregistratedDataByNameAndId(
                (String) tableCoregistratedData.getValueAt(tableCoregistratedData.getSelectedRow(), 0),
                (String) tableCoregistratedData.getValueAt(tableCoregistratedData.getSelectedRow(), 1));
            actualPatient.loadMriImages();
            actualPatient.loadSpectroscopicImages(0);
            txtSerachPatientName.setText("");
            updateCoregistratedTable("");
            loadActualPatientData();

            panelPatient.setVisible(false);
            panelDisplay.setVisible(true);

            panelDisplayTag.setBackground(tagsSelectedColor);
            panelPatientTag.setBackground(tagsColor);
        }
        catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "Zvoľte pacienta na zobrazenie", "Zvoľte pacienta", JOptionPane.ERROR_MESSAGE);
        }
        catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnLoadPatientMouseReleased

    private void txtSerachPatientNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSerachPatientNameKeyReleased
        try {
            updateCoregistratedTable(txtSerachPatientName.getText());
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Chyba", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtSerachPatientNameKeyReleased

    private void btnCoregistrateMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCoregistrateMouseReleased
        try {
            if (txtMRIDirectory.getText().equals("") || txtMRIDirectory.getText() == null) throw new IOException("Prosím zvoľte priečinok so snímkami MRI");
            if (txtSpectroscopyExcel.getText().equals("") || txtSpectroscopyExcel.getText() == null) throw new IOException("Prosím zvoľte xls súbor so spektroskopickými dátami");
            if (txtSpectroscopyDICOM.getText().equals("") || txtSpectroscopyDICOM.getText() == null) throw new IOException("Prosím zvoľte raw súbor so spektroskopickými dátami");
            if (txtSegmentationMask.getText().equals("") || txtSegmentationMask.getText() == null) throw new IOException("Prosím zvoľte NIFTI súbor so segmenta4nou maskou");

            app.setCoregistration(new Coregistration(new Patient(), app.getWorkingDir()));

            app.getCoregistration().getPatient().getMri().setMriDir(new File(txtMRIDirectory.getText()));
            app.getCoregistration().getPatient().getSpectroscopy().setSpectroscopyExcel(new File(txtSpectroscopyExcel.getText()));
            app.getCoregistration().getPatient().getSpectroscopy().setSpectroscopyDICOM(new File(txtSpectroscopyDICOM.getText()));
            app.getCoregistration().getPatient().setSegmentationMask(new File(txtSegmentationMask.getText()));

            JOptionPane.showMessageDialog(this, "Začína sa spracovanie, ktoré potrvá približne 2 minúty. Pre pokračovanie stlačte OK", "Začať spracovanie", JOptionPane.INFORMATION_MESSAGE);
            app.getCoregistration().coregistrate();

            app.loadCoregistratedData();
            txtSerachPatientName.setText("");
            updateCoregistratedTable("");
            JOptionPane.showMessageDialog(this, "Spracovanie ukončené, môžete načítať pacienta", "Spracovanie ukončené", JOptionPane.INFORMATION_MESSAGE);
        }
        catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Chybné údaje", JOptionPane.ERROR_MESSAGE);
        }
        catch (NumberFormatException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Skontrolujte prosím číselné údaje", "Chybné údaje", JOptionPane.ERROR_MESSAGE);
        }
        catch (ParserConfigurationException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Chybné údaje", JOptionPane.ERROR_MESSAGE);
        }
        catch (TransformerException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Chybné údaje", JOptionPane.ERROR_MESSAGE);
        }
        catch (DicomException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Chybné údaje", JOptionPane.ERROR_MESSAGE);
        }
        catch (SAXException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCoregistrateMouseReleased

    private void btnBrowseSpectroscopyMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBrowseSpectroscopyMouseReleased
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("ZVOĽTE XLS SÚBOR SO SPEKTROSKOPICKÝMI DÁTAMI DÁTAMI");

        FileFilter filter = new FileNameExtensionFilter("XLS Files", "xls");
        chooser.setFileFilter(filter);

        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            txtSpectroscopyExcel.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnBrowseSpectroscopyMouseReleased

    private void btnBrowseMRIDirectoryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBrowseMRIDirectoryMouseReleased
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("ZVOĽTE PRIEČINOK S DICOM MRI DÁTAMI");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            txtMRIDirectory.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnBrowseMRIDirectoryMouseReleased

    private void btnClassifyMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClassifyMouseReleased
        try {
            if (actualPatient == null) throw new Exception("Prosím zvoľte pacienta");
            JOptionPane.showMessageDialog(this, "Spúšťa sa klasifikácia, ktorá potrvá približne 20 minút", "Sustiť klasifikáciu", JOptionPane.INFORMATION_MESSAGE);
            String finalClass = app.classify(actualPatient.getPatientDir());
            if (finalClass == null) {
                JOptionPane.showMessageDialog(this, "Počas klasifikácie nastala chyba", "Chyba klasifikácie", JOptionPane.ERROR_MESSAGE);
            }            
            else if (finalClass.equalsIgnoreCase("Glioblastoma") || finalClass.equalsIgnoreCase("Metastasis")) {
                if (finalClass.equalsIgnoreCase("Glioblastoma")) finalClass = "Glioblastóm";
                else finalClass = "Metastázový nádor";
                JOptionPane.showMessageDialog(this, "Pacient bol klasifikovaný do triedy " + finalClass, "Klasifikácia", JOptionPane.INFORMATION_MESSAGE);
                actualPatient.setAIClass(finalClass);
                actualPatient.setData();
                lblClassificationAI.setText(finalClass);
            }
            else{
                JOptionPane.showMessageDialog(this, "Počas klasifikácie nastala chyba", "Chyba klasifikácie", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch (Exception ex){
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Chybné údaje", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnClassifyMouseReleased

    private void btnBrowseSegmentationMaskMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBrowseSegmentationMaskMouseReleased
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Zvoľte NIFTI súbor so segmentačnou masko");

        FileFilter filter = new FileNameExtensionFilter("NIFTI Files", "nii");
        chooser.setFileFilter(filter);

        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            txtSegmentationMask.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnBrowseSegmentationMaskMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddDiagnosis;
    private javax.swing.JButton btnAddDoctorNote;
    private javax.swing.JButton btnBrowseMRIDirectory;
    private javax.swing.JButton btnBrowseSegmentationMask;
    private javax.swing.JButton btnBrowseSpectroscopy;
    private javax.swing.JButton btnBrowseSpectroscopyDICOM;
    private javax.swing.JButton btnBrowseWorkingDirectory;
    private javax.swing.JButton btnClassify;
    private javax.swing.JButton btnCoregistrate;
    private javax.swing.JButton btnLoadPatient;
    private javax.swing.JComboBox<String> cmboxMetabolites;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblActualFrame;
    private javax.swing.JLabel lblClassificationAI;
    private javax.swing.JLabel lblClassificationDoctor;
    private javax.swing.JLabel lblDoctorNote;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblPatientAge;
    private javax.swing.JLabel lblPatientBirthDate;
    private javax.swing.JLabel lblPatientId;
    private javax.swing.JLabel lblPatientName;
    private javax.swing.JLabel lblPatientSex;
    private javax.swing.JLabel lblPatientWeight;
    private javax.swing.JPanel panelContent;
    private javax.swing.JPanel panelDisplay;
    private javax.swing.JPanel panelDisplayTag;
    private javax.swing.JPanel panelHome;
    private javax.swing.JPanel panelHomeTag;
    private javax.swing.JPanel panelLogo;
    private javax.swing.JPanel panelPatient;
    private javax.swing.JPanel panelPatientTag;
    private javax.swing.JPanel penelMenu;
    private javax.swing.JSlider sliderImage;
    private javax.swing.JTable tableCoregistratedData;
    private javax.swing.JTextField txtDiagnosis;
    private javax.swing.JTextField txtDoctorNote;
    private javax.swing.JTextField txtMRIDirectory;
    private javax.swing.JTextField txtSegmentationMask;
    private javax.swing.JTextField txtSerachPatientName;
    private javax.swing.JTextField txtSpectroscopyDICOM;
    private javax.swing.JTextField txtSpectroscopyExcel;
    private javax.swing.JTextField txtWorkingDirectory;
    // End of variables declaration//GEN-END:variables

    public static void serializeWorkingDirPath(File workingDir){
        try {
            FileOutputStream fosApp= new FileOutputStream("workDir.ser");
            ObjectOutputStream oosApp= new ObjectOutputStream(fosApp);
            oosApp.writeObject(workingDir.getAbsolutePath());
            oosApp.close();
            fosApp.close();
        }
        catch(IOException ex){
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, ex.getMessage());
        }
        catch(NullPointerException ex){
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, ex.getMessage());
        }
    }
    
    public static void deserializeWorkingDirPath() {
        try {
            FileInputStream fisApp = new FileInputStream("workDir.ser");
            ObjectInputStream oisApp = new ObjectInputStream(fisApp);
            app.setWorkingDir(new File((String) oisApp.readObject()));
            oisApp.close();
            fisApp.close();
        }
        catch(IOException ex){
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, ex.getMessage());
        }
        catch(ClassNotFoundException ex){
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, ex.getMessage());
        }
    }
    
    private void getApplicationData() {
        this.app = Application.getInstance();
        deserializeWorkingDirPath();
    }
    
    private void loadApplicationData(){
        try {
            panelHome.setVisible(true);
            panelDisplay.setVisible(false);
            panelPatient.setVisible(false);
            panelHomeTag.setBackground(tagsSelectedColor);
            txtWorkingDirectory.setText(app.getWorkingDir().getAbsolutePath());
            app.loadCoregistratedData();
            updateCoregistratedTable("");
        }
        catch(NullPointerException ex){
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, ex.getMessage());
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updateCoregistratedTable(String patientName) {
        ((DefaultTableModel)tableCoregistratedData.getModel()).setRowCount(0);
        DefaultTableModel modelCoregistratedData = (DefaultTableModel) tableCoregistratedData.getModel();
        Iterator<CoregistratedData> iterCoregistratedData;
        
        if (patientName == "") iterCoregistratedData = app.getCoregistratedData().iterator();
        else iterCoregistratedData = app.getCoregistratedDataByName(txtSerachPatientName.getText()).iterator();
        
        while (iterCoregistratedData.hasNext()) {
            CoregistratedData coregistratedData = iterCoregistratedData.next();
            modelCoregistratedData.addRow(new Object[]{ coregistratedData.getName(), coregistratedData.getId(), coregistratedData.getBirthDate()});
        }
    }

    private void loadActualPatientData() {
        try {
            if (actualPatient == null) throw new NullPointerException("Nebol zvolený žiaden pacient");
            
            lblPatientName.setText(actualPatient.getName());
            lblPatientId.setText(actualPatient.getId());
            lblPatientBirthDate.setText(actualPatient.getBirthDate());
            lblPatientSex.setText(actualPatient.getSex());
            lblPatientAge.setText(String.valueOf(actualPatient.getAge()) + " rokov");
            lblPatientWeight.setText(String.valueOf(actualPatient.getWeight()) + " kg");
            
            String AIClass;
            if (actualPatient.getDoctorClass() == "Neurčené") AIClass = "Neurčené";
            else AIClass = actualPatient.getAIClass();
            lblClassificationAI.setText(AIClass);
            
            String doctorClass;
            if (actualPatient.getDoctorClass() == "Neurčené") doctorClass = "Neurčené";
            else doctorClass = actualPatient.getDoctorClass();
            lblClassificationDoctor.setText(doctorClass);
            
            String doctorNote;
            if (actualPatient.getDoctorNote() == "Bez poznámky") doctorNote = " Bez poznámky";
            else doctorNote = actualPatient.getDoctorNote();
            lblDoctorNote.setText(doctorNote);
            
            actualFrame = actualPatient.getMriImages().size() / 2;
            
            displayFrame(actualFrame);
            cmboxMetabolites.setModel(new DefaultComboBoxModel<String>(actualPatient.getStringMetabolites()));
            
            sliderImage.setMaximum(actualPatient.getMriImages().size() - 1);
            sliderImage.setValue(actualFrame);
        }
        catch (NullPointerException ex) {
            
        }
    }
    
    private void displayFrame(int frame) {
        BufferedImage bgImage = actualPatient.getMriImages().get(frame);
        BufferedImage fgImage = actualPatient.getSpectroscopyImages()[frame];
        BufferedImage finalImage = new BufferedImage(bgImage.getWidth(), bgImage.getHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = finalImage.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.drawImage(bgImage, 0, 0, null);
        g.drawImage(fgImage, 0, 0, null);
        g.dispose();
        
        lblActualFrame.setText(String.valueOf(frame));
        lblImage.setIcon(new ImageIcon(finalImage));
    }
}
